package com.coderetreat

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite

import main.scala.com.coderetreat.GameOfLife._

@RunWith(classOf[JUnitRunner])
class GameOfLifeSpec extends FunSuite with ShouldMatchers {
  //test
  test("Single cell is going to die on next generation") {
    val cells = Set(new Cell(0, 0))
    val expected = Set[Cell]()

    val actual = generate(cells)

    assert(actual === expected)
  }

  test("Still life is not changing") {
    val block = Set(new Cell(1, 1), new Cell(1, 2), new Cell(2, 1), new Cell(2, 2))
    val expected = Set(new Cell(1, 1), new Cell(1, 2), new Cell(2, 1), new Cell(2, 2))

    val actual = generate(block)

    assert(actual === expected)
  }

  test("Oscillator is changing") {
    val block = Set(new Cell(1, 2), new Cell(2, 2), new Cell(3, 2))
    val expected = Set(new Cell(2, 1), new Cell(2, 2), new Cell(2, 3))

    val actual = generate(block)

    assert(actual === expected)
  }

  test("Single cell has no neighbours") {
    val cell = new Cell(0, 0)
    val cells = Set(cell)
    val expected = 0

    val actual: Int = neighboursCount(cell, cells)

    assert(actual === expected)
  }

  test("Corner of block has 3 neighbours") {
    val cell = new Cell(1, 1)
    val block = Set(cell, new Cell(1, 2), new Cell(2, 1), new Cell(2, 2))
    val expected = 3

    val actual: Int = neighboursCount(cell, block)

    assert(actual === expected)
  }

  test("Distance block has no neighbours") {
    val cell = new Cell(-1, -1)
    val block = Set(new Cell(1, 1), new Cell(1, 2), new Cell(2, 1), new Cell(2, 2))
    val expected = 0

    val actual: Int = neighboursCount(cell, block)

    assert(actual === expected)
  }

  test("Are neighbours neighbours") {
    val cellA = new Cell(0, 0)
    val cellB = new Cell(0, 1)

    assert(cellA.isNeighbour(cellB) === true)
  }

  test("Is cell neighbour to itself") {
    val cell = new Cell(0, 0)

    assert(cell.isNeighbour(cell) === false)
  }

  test("Are distance cells not neighbour by X") {
    val cellA = new Cell(0, 0)
    val cellB = new Cell(2, 0)

    assert(cellA.isNeighbour(cellB) === false)
  }

  test("Are distance cells not neighbour by Y") {
    val cellA = new Cell(0, 0)
    val cellB = new Cell(0, 2)

    assert(cellA.isNeighbour(cellB) === false)
  }

  test("No next generation out of empty one") {
    val prevGeneration = Set[Cell]()
    val nextGeneration = Set[Cell]()

    val actual: Set[Cell] = nextGenerationNeighbour(prevGeneration)

    assert(actual === nextGeneration)
  }

  test("Get possible places for live") {
    val prevGeneration = Set(new Cell(1, 1))
    val nextGeneration = Set(
      new Cell(0, 0), new Cell(0, 1), new Cell(0, 2),
      new Cell(1, 0), new Cell(1, 1), new Cell(1, 2),
      new Cell(2, 0), new Cell(2, 1), new Cell(2, 2)
    )

    val actual: Set[Cell] = nextGenerationNeighbour(prevGeneration)

    assert(actual === nextGeneration)
  }

  test("Get possible places for live out of block") {
    val prevGeneration = Set(new Cell(1, 1), new Cell(1, 2), new Cell(2, 1), new Cell(2, 2))

    val nextGeneration = Set(
      new Cell(0, 0), new Cell(1, 0), new Cell(2, 0), new Cell(3, 0),
      new Cell(0, 1), new Cell(1, 1), new Cell(2, 1), new Cell(3, 1),
      new Cell(0, 2), new Cell(1, 2), new Cell(2, 2), new Cell(3, 2),
      new Cell(0, 3), new Cell(1, 3), new Cell(2, 3), new Cell(3, 3)
    )

    val actual: Set[Cell] = nextGenerationNeighbour(prevGeneration)

    assert(actual === nextGeneration)
  }

  test("Convert empty generation to printable form") {
    val generation = Set[Cell]()
    val expectedForm = Array(" ")

    val actual: Array[String] = toPrintableForm(generation)

    assert(actual === expectedForm)
  }

  test("Convert single cell to printable form") {
    val generation = Set(new Cell(0, 0))
    val expectedForm = Array("#")

    val actual: Array[String] = toPrintableForm(generation)

    assert(actual === expectedForm)
  }

  test("Convert vertical line to printable form") {
    val generation = Set(new Cell(1, 1), new Cell(1, 2), new Cell(1, 3))
    val expectedForm = Array("#", "#", "#")

    val actual: Array[String] = toPrintableForm(generation)

    assert(actual === expectedForm)
  }

  test("Convert horizontal line to printable form") {
    val generation = Set(new Cell(1, 1), new Cell(2, 1), new Cell(3, 1))
    val expectedForm = Array("###")

    val actual: Array[String] = toPrintableForm(generation)

    assert(actual === expectedForm)
  }

}